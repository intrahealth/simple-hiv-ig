<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="HIVSimpleGender"/>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><h2>Contents</h2><p><code>text/cql</code></p><pre><code class="language-sql">library HIVSimpleGender version '0.1.0'

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'
include FHIRCommon version '4.0.1' called FC
// include AgeRanges called AR

// SNOMED-CT, International Edition
codesystem "SNOMED-CT": 'http://snomed.info/sct' version 'http://snomed.info/sct/900000000000207008'

// LOINC, 2.63+
codesystem "LOINC": 'http://loinc.org'

context Patient

define "Sex": Patient.gender

define "Female":
  Patient.gender = 'female'

define "Male":
  Patient.gender = 'male'

define "Initial Population": true

define "Denominator":
  "Sex" is not null

define "Numerator":
  "Sex" = 'female'

define "Hello, World!": 'Hello, World!'

define "birthDate": Patient.birthDate
define "birthDate_str": ToString(Patient.birthDate)

define "Given Name str": Patient.name.given[0]
define "Given Name": Patient.name.given[0].value

define "Family Name str": Patient.name.family[0]
define "Family Name": Patient.name.family[0].value

// make a code for supp data
define "SDE Sex":
  case
    when Patient.gender = 'male' then Code { code: 'M', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Male' }
    when Patient.gender = 'female' then Code { code: 'F', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Female' }
    else null
  end

// hack to try pseudo-stratifier for location using supp data
define function "GetId"(uri String):
    Last(Split(uri, '/'))

define function "GetLocation"(reference Reference):
  singleton from (
    [Location] Location where Location.id.value = GetId(reference.reference)
  )

define "Location":
    First([Encounter] E return "GetLocation"(First(E.location).location))

define "SDE Location":
    Code { code: "Location".name, system: 'http://location-name-code-system' }

/*
Most recent encounter location
*/
define "Most Recent Encounter Location Reference":
  Last(
    [Encounter] E
      return First(E.location L return L.location)
      //sort by start of period
  )/*
Location Code
*/
define "Location Code":
  singleton from (
    [Location] L
      let identifier: L.identifier I where I.system = 'http://example.org/opencr-identifiers'
      where L.id = Last(Split("Most Recent Encounter Location Reference", '/'))
      return CodeableConcept {
        coding: {
          Coding {
            code: identifier.value,
            system: identifier.system
          }
        }
      }
  )
</code></pre><p><code>No Content</code> (<code>application/elm+xml</code>)</p></div>
  </text>
  <url value="https://github.com/intrahealth/simple-hiv-ig/Library/HIVSimpleGender"/>
  <version value="0.1.0"/>
  <name value="HIVSimpleGender"/>
  <title value="HIVSimpleGender"/>
  <status value="active"/>
  <experimental value="true"/>
  <type>
    <coding>
      <system value="http://terminology.hl7.org/CodeSystem/library-type"/>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2021-06-29T01:19:24+00:00"/>
  <publisher value="IntraHealth International"/>
  <contact>
    <telecom>
      <system value="url"/>
      <value value="http://hl7.org/Special/committees/[something]"/>
    </telecom>
  </contact>
  <content>
    <contentType value="text/cql"/>
    <data value="bGlicmFyeSBISVZTaW1wbGVHZW5kZXIgdmVyc2lvbiAnMC4xLjAnCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwoKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScKaW5jbHVkZSBGSElSQ29tbW9uIHZlcnNpb24gJzQuMC4xJyBjYWxsZWQgRkMKLy8gaW5jbHVkZSBBZ2VSYW5nZXMgY2FsbGVkIEFSCgovLyBTTk9NRUQtQ1QsIEludGVybmF0aW9uYWwgRWRpdGlvbgpjb2Rlc3lzdGVtICJTTk9NRUQtQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcgdmVyc2lvbiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdC85MDAwMDAwMDAwMDAyMDcwMDgnCgovLyBMT0lOQywgMi42MysKY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycKCmNvbnRleHQgUGF0aWVudAoKZGVmaW5lICJTZXgiOiBQYXRpZW50LmdlbmRlcgoKZGVmaW5lICJGZW1hbGUiOgogIFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScKCmRlZmluZSAiTWFsZSI6CiAgUGF0aWVudC5nZW5kZXIgPSAnbWFsZScKCmRlZmluZSAiSW5pdGlhbCBQb3B1bGF0aW9uIjogdHJ1ZQoKZGVmaW5lICJEZW5vbWluYXRvciI6CiAgIlNleCIgaXMgbm90IG51bGwKCmRlZmluZSAiTnVtZXJhdG9yIjoKICAiU2V4IiA9ICdmZW1hbGUnCgpkZWZpbmUgIkhlbGxvLCBXb3JsZCEiOiAnSGVsbG8sIFdvcmxkIScKCmRlZmluZSAiYmlydGhEYXRlIjogUGF0aWVudC5iaXJ0aERhdGUKZGVmaW5lICJiaXJ0aERhdGVfc3RyIjogVG9TdHJpbmcoUGF0aWVudC5iaXJ0aERhdGUpCgpkZWZpbmUgIkdpdmVuIE5hbWUgc3RyIjogUGF0aWVudC5uYW1lLmdpdmVuWzBdCmRlZmluZSAiR2l2ZW4gTmFtZSI6IFBhdGllbnQubmFtZS5naXZlblswXS52YWx1ZQoKZGVmaW5lICJGYW1pbHkgTmFtZSBzdHIiOiBQYXRpZW50Lm5hbWUuZmFtaWx5WzBdCmRlZmluZSAiRmFtaWx5IE5hbWUiOiBQYXRpZW50Lm5hbWUuZmFtaWx5WzBdLnZhbHVlCgovLyBtYWtlIGEgY29kZSBmb3Igc3VwcCBkYXRhCmRlZmluZSAiU0RFIFNleCI6CiAgY2FzZQogICAgd2hlbiBQYXRpZW50LmdlbmRlciA9ICdtYWxlJyB0aGVuIENvZGUgeyBjb2RlOiAnTScsIHN5c3RlbTogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvdjMvQWRtaW5pc3RyYXRpdmVHZW5kZXInLCBkaXNwbGF5OiAnTWFsZScgfQogICAgd2hlbiBQYXRpZW50LmdlbmRlciA9ICdmZW1hbGUnIHRoZW4gQ29kZSB7IGNvZGU6ICdGJywgc3lzdGVtOiAnaHR0cDovL2hsNy5vcmcvZmhpci92My9BZG1pbmlzdHJhdGl2ZUdlbmRlcicsIGRpc3BsYXk6ICdGZW1hbGUnIH0KICAgIGVsc2UgbnVsbAogIGVuZAoKLy8gaGFjayB0byB0cnkgcHNldWRvLXN0cmF0aWZpZXIgZm9yIGxvY2F0aW9uIHVzaW5nIHN1cHAgZGF0YQpkZWZpbmUgZnVuY3Rpb24gIkdldElkIih1cmkgU3RyaW5nKToKICAgIExhc3QoU3BsaXQodXJpLCAnLycpKQoKZGVmaW5lIGZ1bmN0aW9uICJHZXRMb2NhdGlvbiIocmVmZXJlbmNlIFJlZmVyZW5jZSk6CiAgc2luZ2xldG9uIGZyb20gKAogICAgW0xvY2F0aW9uXSBMb2NhdGlvbiB3aGVyZSBMb2NhdGlvbi5pZC52YWx1ZSA9IEdldElkKHJlZmVyZW5jZS5yZWZlcmVuY2UpCiAgKQoKZGVmaW5lICJMb2NhdGlvbiI6CiAgICBGaXJzdChbRW5jb3VudGVyXSBFIHJldHVybiAiR2V0TG9jYXRpb24iKEZpcnN0KEUubG9jYXRpb24pLmxvY2F0aW9uKSkKCmRlZmluZSAiU0RFIExvY2F0aW9uIjoKICAgIENvZGUgeyBjb2RlOiAiTG9jYXRpb24iLm5hbWUsIHN5c3RlbTogJ2h0dHA6Ly9sb2NhdGlvbi1uYW1lLWNvZGUtc3lzdGVtJyB9CgovKgpNb3N0IHJlY2VudCBlbmNvdW50ZXIgbG9jYXRpb24KKi8KZGVmaW5lICJNb3N0IFJlY2VudCBFbmNvdW50ZXIgTG9jYXRpb24gUmVmZXJlbmNlIjoKICBMYXN0KAogICAgW0VuY291bnRlcl0gRQogICAgICByZXR1cm4gRmlyc3QoRS5sb2NhdGlvbiBMIHJldHVybiBMLmxvY2F0aW9uKQogICAgICAvL3NvcnQgYnkgc3RhcnQgb2YgcGVyaW9kCiAgKS8qCkxvY2F0aW9uIENvZGUKKi8KZGVmaW5lICJMb2NhdGlvbiBDb2RlIjoKICBzaW5nbGV0b24gZnJvbSAoCiAgICBbTG9jYXRpb25dIEwKICAgICAgbGV0IGlkZW50aWZpZXI6IEwuaWRlbnRpZmllciBJIHdoZXJlIEkuc3lzdGVtID0gJ2h0dHA6Ly9leGFtcGxlLm9yZy9vcGVuY3ItaWRlbnRpZmllcnMnCiAgICAgIHdoZXJlIEwuaWQgPSBMYXN0KFNwbGl0KCJNb3N0IFJlY2VudCBFbmNvdW50ZXIgTG9jYXRpb24gUmVmZXJlbmNlIiwgJy8nKSkKICAgICAgcmV0dXJuIENvZGVhYmxlQ29uY2VwdCB7CiAgICAgICAgY29kaW5nOiB7CiAgICAgICAgICBDb2RpbmcgewogICAgICAgICAgICBjb2RlOiBpZGVudGlmaWVyLnZhbHVlLAogICAgICAgICAgICBzeXN0ZW06IGlkZW50aWZpZXIuc3lzdGVtCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgKQo="/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
  </content>
</Library>