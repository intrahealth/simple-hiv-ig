<?xml version="1.0" encoding="UTF-8"?>

<Library xmlns="http://hl7.org/fhir">
  <id value="KitchenSink"/>
  <text>
    <status value="generated"/><div xmlns="http://www.w3.org/1999/xhtml"><h2>Contents</h2><p><code>text/cql</code></p><pre><code class="language-sql">library KitchenSink version '0.1.0'

using FHIR version '4.0.1'

include FHIRHelpers version '4.0.1'
include FHIRCommon version '4.0.1' called FC
include AgeRanges version '0.1.0' called AR

// SNOMED-CT, International Edition
codesystem "SNOMED-CT": 'http://snomed.info/sct' version 'http://snomed.info/sct/900000000000207008'
// LOINC, 2.63+
codesystem "LOINC": 'http://loinc.org'

// ConditionOnset: HIV infection, this conflicts with test result, so is be renamed
code "HIV Condition Positive": '86406008' from "SNOMED-CT" display 'HIV Positive'
code "HIV 1 and 2 tests - Meaningful Use set": '75622-1' from "LOINC" display 'HIV 1 and 2 tests - Meaningful Use set'
code "Pregnant (finding)": '77386006' from "SNOMED-CT" display 'Pregnant (finding)'
code "HIV 1 RNA NAA+probe (Specimen)": '25836-8' from "LOINC" display 'HIV 1 RNA NAA+probe (Specimen)'

context Patient

define "Sex":
  Patient.gender

define "Sex Value":
  Patient.gender.value

define "Female":
  Patient.gender = 'female'

define "Male":
  Patient.gender = 'male'

define "Age Group/Sex":
  AR."Age Group".code + ':' + "Sex"


define "Initial Population":
  true

define "Denominator":
  "Sex" is not null

define "Numerator":
  "Sex" = 'female'

define "Hello, World!":
  'Hello, World!'

/* define "birthDate": Patient.birthDate */
define "birthDate_str":
  ToString(Patient.birthDate)

/* define "Given Name str": Patient.name.given[0] */
define "Given Name":
  Patient.name.given[0].value

/* define "Family Name str": Patient.name.family[0] */
define "Family Name":
  Patient.name.family[0].value

// works in fsh
define "HIV Condition":
  exists ["Condition": "HIV Condition Positive"]

define "Is HIV Positive":
  "HIV Condition"

define "Is HIV Negative":
  not "HIV Condition"


define "Pregnant":
  exists ["Condition": "Pregnant (finding)"]

define "Viral Load Test Result":
  ["Observation": "HIV 1 RNA NAA+probe (Specimen)"] Obs
    where Obs.status = 'final'
      and Obs.value is not null


define "HIV Test Exists":
  exists ([Observation: "HIV 1 and 2 tests - Meaningful Use set"])

define "HIV Positive Observation":
  [Observation: "HIV 1 and 2 tests - Meaningful Use set"] Observation
    where Observation.value = "Is HIV Positive"

define "HIV Negative Observation":
  [Observation: "HIV 1 and 2 tests - Meaningful Use set"] Observation
    where Observation.value = "Is HIV Negative"

// always null
define "HIV Test Results":
  case
    when "Is HIV Positive" then "HIV Positive"
    when "Is HIV Negative" then "HIV Negative"
    else null
  end

// always null
define "Age Group/Sex/HIV Test Results":
  AR."Age Group".code + ':' + "Sex" + ':' + "HIV Test Results".code


// synthea uses copies/mL but fsh uses {copies}/mL which is official
define "Living with HIV and on ART with suppressed viral load results (&lt;1000 copies/mL)":
  ["Observation": "HIV 1 RNA NAA+probe (Specimen)"] Observation
    where Observation.value &lt; 1000 '{copies}/mL'

define "Living with HIV and on ART with unsuppressed viral load results (&gt;1000 copies/mL)":
  ["Observation": "HIV 1 RNA NAA+probe (Specimen)"] Observation
    where Observation.value &gt;= 1000 '{copies}/mL'

define "Suppressed":
  [Observation: "HIV 1 RNA NAA+probe (Specimen)"] Observation
    where Observation.value &lt; 1000 '{copies}/mL'

define "Unsuppressed":
  [Observation: "HIV 1 RNA NAA+probe (Specimen)"] Observation
    where Observation.value &gt;= 1000 '{copies}/mL'


define "Contact date":
  [Encounter] E
    return E.period.start


// make a gender code for supp data
define "SDE Sex":
  case
    when Patient.gender = 'male' then Code { code: 'M', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Male' }
    when Patient.gender = 'female' then Code { code: 'F', system: 'http://hl7.org/fhir/v3/AdministrativeGender', display: 'Female' }
    else null
  end

/* first attempt at supp data for location */

// hack to try pseudo-stratifier for location using supp data
define function "GetId"(uri String):
    Last(Split(uri, '/'))

define function "GetLocation"(reference Reference):
  singleton from (
    [Location] Location where Location.id.value = GetId(reference.reference)
  )

define "Location":
    First([Encounter] E return "GetLocation"(First(E.location).location))

// not working for some reason
define "SDE Location":
    Code { code: "Location".name, system: 'https://github.com/synthetichealth/synthea' }

/* second attempt at supp data for location*/

/*
Most recent encounter location
*/
define "Most Recent Encounter Location Reference":
  Last(
    [Encounter] E
      return First(E.location L return L.location)
      //sort by start of period
  )

/*
Location Code
*/
define "Location Code":
 singleton from (
   [Location] L
     let identifier: singleton from (L.identifier I where I.system = 'https://github.com/synthetichealth/synthea')
     where L.id = Last(Split("Most Recent Encounter Location Reference".reference, '/'))
     return CodeableConcept {
       coding: {
         Coding {
           code: code { value: identifier.value },
           system: identifier.system
         }
       }
     }
 )

define "Location Code Deux":
singleton from (
  [Location] L
    let identifier: singleton from (L.identifier)
    where L.id = Last(Split("Most Recent Encounter Location Reference".reference, '/'))
    return CodeableConcept {
      coding: {
        Coding {
          code: code { value: identifier.value },
          system: identifier.system
        }
      }
    }
)


/* create clinical decision support logic */
/*
define "HIVTestProposed": ServiceRequest {
 type: Code '75622-1' from "LOINC"
 display 'HIV 1 and 2 tests - Meaningful Use set',
 status 'active'
 intent: 'proposal'
 // values for other elements of the request...
}
 */
</code></pre><p><code>No Content</code> (<code>application/elm+xml</code>)</p></div>
  </text>
  <url value="https://github.com/intrahealth/simple-hiv-ig/Library/KitchenSink"/>
  <version value="0.1.0"/>
  <status value="draft"/>
  <experimental value="true"/>
  <type>
    <coding>
      <code value="logic-library"/>
    </coding>
  </type>
  <date value="2021-07-14T03:58:23+00:00"/>
  <publisher value="IntraHealth International"/>
  <contact>
    <telecom>
      <system value="url"/>
      <value value="http://hl7.org/Special/committees/[something]"/>
    </telecom>
  </contact>
  <content>
    <contentType value="text/cql"/>
    <data value="bGlicmFyeSBLaXRjaGVuU2luayB2ZXJzaW9uICcwLjEuMCcKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4xJwppbmNsdWRlIEZISVJDb21tb24gdmVyc2lvbiAnNC4wLjEnIGNhbGxlZCBGQwppbmNsdWRlIEFnZVJhbmdlcyB2ZXJzaW9uICcwLjEuMCcgY2FsbGVkIEFSCgovLyBTTk9NRUQtQ1QsIEludGVybmF0aW9uYWwgRWRpdGlvbgpjb2Rlc3lzdGVtICJTTk9NRUQtQ1QiOiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdCcgdmVyc2lvbiAnaHR0cDovL3Nub21lZC5pbmZvL3NjdC85MDAwMDAwMDAwMDAyMDcwMDgnCi8vIExPSU5DLCAyLjYzKwpjb2Rlc3lzdGVtICJMT0lOQyI6ICdodHRwOi8vbG9pbmMub3JnJwoKLy8gQ29uZGl0aW9uT25zZXQ6IEhJViBpbmZlY3Rpb24sIHRoaXMgY29uZmxpY3RzIHdpdGggdGVzdCByZXN1bHQsIHNvIGlzIGJlIHJlbmFtZWQKY29kZSAiSElWIENvbmRpdGlvbiBQb3NpdGl2ZSI6ICc4NjQwNjAwOCcgZnJvbSAiU05PTUVELUNUIiBkaXNwbGF5ICdISVYgUG9zaXRpdmUnCmNvZGUgIkhJViAxIGFuZCAyIHRlc3RzIC0gTWVhbmluZ2Z1bCBVc2Ugc2V0IjogJzc1NjIyLTEnIGZyb20gIkxPSU5DIiBkaXNwbGF5ICdISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldCcKY29kZSAiUHJlZ25hbnQgKGZpbmRpbmcpIjogJzc3Mzg2MDA2JyBmcm9tICJTTk9NRUQtQ1QiIGRpc3BsYXkgJ1ByZWduYW50IChmaW5kaW5nKScKY29kZSAiSElWIDEgUk5BIE5BQStwcm9iZSAoU3BlY2ltZW4pIjogJzI1ODM2LTgnIGZyb20gIkxPSU5DIiBkaXNwbGF5ICdISVYgMSBSTkEgTkFBK3Byb2JlIChTcGVjaW1lbiknCgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSAiU2V4IjoKICBQYXRpZW50LmdlbmRlcgoKZGVmaW5lICJTZXggVmFsdWUiOgogIFBhdGllbnQuZ2VuZGVyLnZhbHVlCgpkZWZpbmUgIkZlbWFsZSI6CiAgUGF0aWVudC5nZW5kZXIgPSAnZmVtYWxlJwoKZGVmaW5lICJNYWxlIjoKICBQYXRpZW50LmdlbmRlciA9ICdtYWxlJwoKZGVmaW5lICJBZ2UgR3JvdXAvU2V4IjoKICBBUi4iQWdlIEdyb3VwIi5jb2RlICsgJzonICsgIlNleCIKCgpkZWZpbmUgIkluaXRpYWwgUG9wdWxhdGlvbiI6CiAgdHJ1ZQoKZGVmaW5lICJEZW5vbWluYXRvciI6CiAgIlNleCIgaXMgbm90IG51bGwKCmRlZmluZSAiTnVtZXJhdG9yIjoKICAiU2V4IiA9ICdmZW1hbGUnCgpkZWZpbmUgIkhlbGxvLCBXb3JsZCEiOgogICdIZWxsbywgV29ybGQhJwoKLyogZGVmaW5lICJiaXJ0aERhdGUiOiBQYXRpZW50LmJpcnRoRGF0ZSAqLwpkZWZpbmUgImJpcnRoRGF0ZV9zdHIiOgogIFRvU3RyaW5nKFBhdGllbnQuYmlydGhEYXRlKQoKLyogZGVmaW5lICJHaXZlbiBOYW1lIHN0ciI6IFBhdGllbnQubmFtZS5naXZlblswXSAqLwpkZWZpbmUgIkdpdmVuIE5hbWUiOgogIFBhdGllbnQubmFtZS5naXZlblswXS52YWx1ZQoKLyogZGVmaW5lICJGYW1pbHkgTmFtZSBzdHIiOiBQYXRpZW50Lm5hbWUuZmFtaWx5WzBdICovCmRlZmluZSAiRmFtaWx5IE5hbWUiOgogIFBhdGllbnQubmFtZS5mYW1pbHlbMF0udmFsdWUKCi8vIHdvcmtzIGluIGZzaApkZWZpbmUgIkhJViBDb25kaXRpb24iOgogIGV4aXN0cyBbIkNvbmRpdGlvbiI6ICJISVYgQ29uZGl0aW9uIFBvc2l0aXZlIl0KCmRlZmluZSAiSXMgSElWIFBvc2l0aXZlIjoKICAiSElWIENvbmRpdGlvbiIKCmRlZmluZSAiSXMgSElWIE5lZ2F0aXZlIjoKICBub3QgIkhJViBDb25kaXRpb24iCgoKZGVmaW5lICJQcmVnbmFudCI6CiAgZXhpc3RzIFsiQ29uZGl0aW9uIjogIlByZWduYW50IChmaW5kaW5nKSJdCgpkZWZpbmUgIlZpcmFsIExvYWQgVGVzdCBSZXN1bHQiOgogIFsiT2JzZXJ2YXRpb24iOiAiSElWIDEgUk5BIE5BQStwcm9iZSAoU3BlY2ltZW4pIl0gT2JzCiAgICB3aGVyZSBPYnMuc3RhdHVzID0gJ2ZpbmFsJwogICAgICBhbmQgT2JzLnZhbHVlIGlzIG5vdCBudWxsCgoKZGVmaW5lICJISVYgVGVzdCBFeGlzdHMiOgogIGV4aXN0cyAoW09ic2VydmF0aW9uOiAiSElWIDEgYW5kIDIgdGVzdHMgLSBNZWFuaW5nZnVsIFVzZSBzZXQiXSkKCmRlZmluZSAiSElWIFBvc2l0aXZlIE9ic2VydmF0aW9uIjoKICBbT2JzZXJ2YXRpb246ICJISVYgMSBhbmQgMiB0ZXN0cyAtIE1lYW5pbmdmdWwgVXNlIHNldCJdIE9ic2VydmF0aW9uCiAgICB3aGVyZSBPYnNlcnZhdGlvbi52YWx1ZSA9ICJJcyBISVYgUG9zaXRpdmUiCgpkZWZpbmUgIkhJViBOZWdhdGl2ZSBPYnNlcnZhdGlvbiI6CiAgW09ic2VydmF0aW9uOiAiSElWIDEgYW5kIDIgdGVzdHMgLSBNZWFuaW5nZnVsIFVzZSBzZXQiXSBPYnNlcnZhdGlvbgogICAgd2hlcmUgT2JzZXJ2YXRpb24udmFsdWUgPSAiSXMgSElWIE5lZ2F0aXZlIgoKLy8gYWx3YXlzIG51bGwKZGVmaW5lICJISVYgVGVzdCBSZXN1bHRzIjoKICBjYXNlCiAgICB3aGVuICJJcyBISVYgUG9zaXRpdmUiIHRoZW4gIkhJViBQb3NpdGl2ZSIKICAgIHdoZW4gIklzIEhJViBOZWdhdGl2ZSIgdGhlbiAiSElWIE5lZ2F0aXZlIgogICAgZWxzZSBudWxsCiAgZW5kCgovLyBhbHdheXMgbnVsbApkZWZpbmUgIkFnZSBHcm91cC9TZXgvSElWIFRlc3QgUmVzdWx0cyI6CiAgQVIuIkFnZSBHcm91cCIuY29kZSArICc6JyArICJTZXgiICsgJzonICsgIkhJViBUZXN0IFJlc3VsdHMiLmNvZGUKCgovLyBzeW50aGVhIHVzZXMgY29waWVzL21MIGJ1dCBmc2ggdXNlcyB7Y29waWVzfS9tTCB3aGljaCBpcyBvZmZpY2lhbApkZWZpbmUgIkxpdmluZyB3aXRoIEhJViBhbmQgb24gQVJUIHdpdGggc3VwcHJlc3NlZCB2aXJhbCBsb2FkIHJlc3VsdHMgKDwxMDAwIGNvcGllcy9tTCkiOgogIFsiT2JzZXJ2YXRpb24iOiAiSElWIDEgUk5BIE5BQStwcm9iZSAoU3BlY2ltZW4pIl0gT2JzZXJ2YXRpb24KICAgIHdoZXJlIE9ic2VydmF0aW9uLnZhbHVlIDwgMTAwMCAne2NvcGllc30vbUwnCgpkZWZpbmUgIkxpdmluZyB3aXRoIEhJViBhbmQgb24gQVJUIHdpdGggdW5zdXBwcmVzc2VkIHZpcmFsIGxvYWQgcmVzdWx0cyAoPjEwMDAgY29waWVzL21MKSI6CiAgWyJPYnNlcnZhdGlvbiI6ICJISVYgMSBSTkEgTkFBK3Byb2JlIChTcGVjaW1lbikiXSBPYnNlcnZhdGlvbgogICAgd2hlcmUgT2JzZXJ2YXRpb24udmFsdWUgPj0gMTAwMCAne2NvcGllc30vbUwnCgpkZWZpbmUgIlN1cHByZXNzZWQiOgogIFtPYnNlcnZhdGlvbjogIkhJViAxIFJOQSBOQUErcHJvYmUgKFNwZWNpbWVuKSJdIE9ic2VydmF0aW9uCiAgICB3aGVyZSBPYnNlcnZhdGlvbi52YWx1ZSA8IDEwMDAgJ3tjb3BpZXN9L21MJwoKZGVmaW5lICJVbnN1cHByZXNzZWQiOgogIFtPYnNlcnZhdGlvbjogIkhJViAxIFJOQSBOQUErcHJvYmUgKFNwZWNpbWVuKSJdIE9ic2VydmF0aW9uCiAgICB3aGVyZSBPYnNlcnZhdGlvbi52YWx1ZSA+PSAxMDAwICd7Y29waWVzfS9tTCcKCgpkZWZpbmUgIkNvbnRhY3QgZGF0ZSI6CiAgW0VuY291bnRlcl0gRQogICAgcmV0dXJuIEUucGVyaW9kLnN0YXJ0CgoKLy8gbWFrZSBhIGdlbmRlciBjb2RlIGZvciBzdXBwIGRhdGEKZGVmaW5lICJTREUgU2V4IjoKICBjYXNlCiAgICB3aGVuIFBhdGllbnQuZ2VuZGVyID0gJ21hbGUnIHRoZW4gQ29kZSB7IGNvZGU6ICdNJywgc3lzdGVtOiAnaHR0cDovL2hsNy5vcmcvZmhpci92My9BZG1pbmlzdHJhdGl2ZUdlbmRlcicsIGRpc3BsYXk6ICdNYWxlJyB9CiAgICB3aGVuIFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScgdGhlbiBDb2RlIHsgY29kZTogJ0YnLCBzeXN0ZW06ICdodHRwOi8vaGw3Lm9yZy9maGlyL3YzL0FkbWluaXN0cmF0aXZlR2VuZGVyJywgZGlzcGxheTogJ0ZlbWFsZScgfQogICAgZWxzZSBudWxsCiAgZW5kCgovKiBmaXJzdCBhdHRlbXB0IGF0IHN1cHAgZGF0YSBmb3IgbG9jYXRpb24gKi8KCi8vIGhhY2sgdG8gdHJ5IHBzZXVkby1zdHJhdGlmaWVyIGZvciBsb2NhdGlvbiB1c2luZyBzdXBwIGRhdGEKZGVmaW5lIGZ1bmN0aW9uICJHZXRJZCIodXJpIFN0cmluZyk6CiAgICBMYXN0KFNwbGl0KHVyaSwgJy8nKSkKCmRlZmluZSBmdW5jdGlvbiAiR2V0TG9jYXRpb24iKHJlZmVyZW5jZSBSZWZlcmVuY2UpOgogIHNpbmdsZXRvbiBmcm9tICgKICAgIFtMb2NhdGlvbl0gTG9jYXRpb24gd2hlcmUgTG9jYXRpb24uaWQudmFsdWUgPSBHZXRJZChyZWZlcmVuY2UucmVmZXJlbmNlKQogICkKCmRlZmluZSAiTG9jYXRpb24iOgogICAgRmlyc3QoW0VuY291bnRlcl0gRSByZXR1cm4gIkdldExvY2F0aW9uIihGaXJzdChFLmxvY2F0aW9uKS5sb2NhdGlvbikpCgovLyBub3Qgd29ya2luZyBmb3Igc29tZSByZWFzb24KZGVmaW5lICJTREUgTG9jYXRpb24iOgogICAgQ29kZSB7IGNvZGU6ICJMb2NhdGlvbiIubmFtZSwgc3lzdGVtOiAnaHR0cHM6Ly9naXRodWIuY29tL3N5bnRoZXRpY2hlYWx0aC9zeW50aGVhJyB9CgovKiBzZWNvbmQgYXR0ZW1wdCBhdCBzdXBwIGRhdGEgZm9yIGxvY2F0aW9uKi8KCi8qCk1vc3QgcmVjZW50IGVuY291bnRlciBsb2NhdGlvbgoqLwpkZWZpbmUgIk1vc3QgUmVjZW50IEVuY291bnRlciBMb2NhdGlvbiBSZWZlcmVuY2UiOgogIExhc3QoCiAgICBbRW5jb3VudGVyXSBFCiAgICAgIHJldHVybiBGaXJzdChFLmxvY2F0aW9uIEwgcmV0dXJuIEwubG9jYXRpb24pCiAgICAgIC8vc29ydCBieSBzdGFydCBvZiBwZXJpb2QKICApCgovKgpMb2NhdGlvbiBDb2RlCiovCmRlZmluZSAiTG9jYXRpb24gQ29kZSI6CiBzaW5nbGV0b24gZnJvbSAoCiAgIFtMb2NhdGlvbl0gTAogICAgIGxldCBpZGVudGlmaWVyOiBzaW5nbGV0b24gZnJvbSAoTC5pZGVudGlmaWVyIEkgd2hlcmUgSS5zeXN0ZW0gPSAnaHR0cHM6Ly9naXRodWIuY29tL3N5bnRoZXRpY2hlYWx0aC9zeW50aGVhJykKICAgICB3aGVyZSBMLmlkID0gTGFzdChTcGxpdCgiTW9zdCBSZWNlbnQgRW5jb3VudGVyIExvY2F0aW9uIFJlZmVyZW5jZSIucmVmZXJlbmNlLCAnLycpKQogICAgIHJldHVybiBDb2RlYWJsZUNvbmNlcHQgewogICAgICAgY29kaW5nOiB7CiAgICAgICAgIENvZGluZyB7CiAgICAgICAgICAgY29kZTogY29kZSB7IHZhbHVlOiBpZGVudGlmaWVyLnZhbHVlIH0sCiAgICAgICAgICAgc3lzdGVtOiBpZGVudGlmaWVyLnN5c3RlbQogICAgICAgICB9CiAgICAgICB9CiAgICAgfQogKQoKZGVmaW5lICJMb2NhdGlvbiBDb2RlIERldXgiOgpzaW5nbGV0b24gZnJvbSAoCiAgW0xvY2F0aW9uXSBMCiAgICBsZXQgaWRlbnRpZmllcjogc2luZ2xldG9uIGZyb20gKEwuaWRlbnRpZmllcikKICAgIHdoZXJlIEwuaWQgPSBMYXN0KFNwbGl0KCJNb3N0IFJlY2VudCBFbmNvdW50ZXIgTG9jYXRpb24gUmVmZXJlbmNlIi5yZWZlcmVuY2UsICcvJykpCiAgICByZXR1cm4gQ29kZWFibGVDb25jZXB0IHsKICAgICAgY29kaW5nOiB7CiAgICAgICAgQ29kaW5nIHsKICAgICAgICAgIGNvZGU6IGNvZGUgeyB2YWx1ZTogaWRlbnRpZmllci52YWx1ZSB9LAogICAgICAgICAgc3lzdGVtOiBpZGVudGlmaWVyLnN5c3RlbQogICAgICAgIH0KICAgICAgfQogICAgfQopCgoKLyogY3JlYXRlIGNsaW5pY2FsIGRlY2lzaW9uIHN1cHBvcnQgbG9naWMgKi8KLyoKZGVmaW5lICJISVZUZXN0UHJvcG9zZWQiOiBTZXJ2aWNlUmVxdWVzdCB7CiB0eXBlOiBDb2RlICc3NTYyMi0xJyBmcm9tICJMT0lOQyIKIGRpc3BsYXkgJ0hJViAxIGFuZCAyIHRlc3RzIC0gTWVhbmluZ2Z1bCBVc2Ugc2V0JywKIHN0YXR1cyAnYWN0aXZlJwogaW50ZW50OiAncHJvcG9zYWwnCiAvLyB2YWx1ZXMgZm9yIG90aGVyIGVsZW1lbnRzIG9mIHRoZSByZXF1ZXN0Li4uCn0KICovCg=="/>
  </content>
  <content>
    <contentType value="application/elm+xml"/>
  </content>
</Library>